{"version":3,"file":"parse.js","sources":["../src/parsers/date.js","../src/parsers/time.js","../src/parsers/index.js","../src/parsers/list.js","../src/parse.js","../src/parsers/duration.js"],"sourcesContent":["'use strict'\n\nimport { parse, isMatch } from 'date-fns'\nimport { zonedTimeToUtc } from 'date-fns-tz/esm'\n\nconst loc = 'UTC'\nconst commonDateFormats = [\n  'yyyy-MM-dd',\n  'dd/MM/yyyy',\n  'dd/MM/yy',\n  'dd-MM-yyyy',\n  'dd-MM-yy',\n  'dd.MM.yyyy',\n  'dd.MM.yy'\n]\n\nexport default function parseDate(text) {\n  const match = commonDateFormats.map((format) => {\n    return isMatch(text, format)\n  })\n  if (match.indexOf(true) > -1) {\n    const date = zonedTimeToUtc(\n      parse(text, commonDateFormats[match.indexOf(true)], new Date()),\n      loc\n    ).toJSON()\n    return date.split('T')[0]\n  } else {\n    return null\n  }\n}\n","'use strict'\n\nimport { parse, isMatch } from 'date-fns'\nimport { zonedTimeToUtc, formatInTimeZone } from 'date-fns-tz/esm'\n\nconst loc = 'UTC'\nconst commonTimeFormats = ['HH:mm', 'HH.mm', 'hh:mm a', 'hh:mm A']\n\nexport default function parseTime(text) {\n  const match = commonTimeFormats.map((format) => {\n    return isMatch(text, format)\n  })\n  if (match.indexOf(true) > -1) {\n    const time = zonedTimeToUtc(\n      parse(text, commonTimeFormats[match.indexOf(true)], new Date()),\n      loc\n    )\n    return formatInTimeZone(time, loc, 'HH:mm')\n  } else {\n    return null\n  }\n}\n","'use strict'\n\nimport date from './date.js'\nimport time from './time.js'\nimport duration from './duration.js'\nimport list from './list.js'\n\nexport const parseDate = date\nexport const parseTime = time\nexport const parseDuration = duration\nexport const parseList = list\n","'use strict'\n\nexport default function parseList(list) {\n  return list.children\n    .map((item) => {\n      const listItem = {}\n      if (item.type === 'list') {\n        return parseList(list)\n      } else if (item.type === 'listItem') {\n        listItem.checked = item.checked\n        return item.children\n          .map((child) => {\n            if (child.type === 'paragraph') {\n              listItem.text = child.children\n                .map((c) => {\n                  if (c.type === 'link') {\n                    return c.children[0].value\n                  } else {\n                    return c.value\n                  }\n                })\n                .filter((x) => !!x)\n                .join('')\n              return listItem\n            }\n          })\n          .filter((x) => !!x)\n      }\n    })\n    .filter((x) => !!x)\n}\n","'use strict'\n\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkGfm from 'remark-gfm'\nimport slugify from '@sindresorhus/slugify'\nimport remarkStringify from 'remark-stringify'\nimport stripFinalNewline from 'strip-final-newline'\n\nimport {\n  parseDate,\n  parseTime,\n  parseDuration,\n  parseList\n} from './parsers/index.js'\n\nexport default async function parseMD(body) {\n  const tokens = await unified().use(remarkParse).use(remarkGfm).parse(body)\n  if (!tokens) {\n    return []\n  }\n\n  const structuredResponse = {}\n  let currentHeading = null\n  for (const token of tokens.children) {\n    const text = await unified()\n      .use(remarkGfm)\n      .use(remarkStringify)\n      .stringify(token)\n    let cleanText = stripFinalNewline(text)\n\n    // remove `\\\\_`\n    if (cleanText.indexOf('\\\\_') > -1) {\n      cleanText = cleanText.replace(/\\\\_/g, '_')\n    }\n\n    // issue forms uses h3 as a heading\n    if (token.type === 'heading' && token.depth === 3) {\n      currentHeading = slugify(token.children[0].value)\n      structuredResponse[currentHeading] = {\n        title: token.children[0].value,\n        content: []\n      }\n    } else if (token.type === 'paragraph' && currentHeading) {\n      const obj = structuredResponse[currentHeading]\n\n      const date = parseDate(cleanText)\n      const time = parseTime(cleanText)\n      const duration = parseDuration(cleanText)\n\n      if (date) {\n        obj.date = date\n      }\n\n      if (time) {\n        obj.time = time\n      }\n\n      if (duration) {\n        obj.duration = duration\n      }\n\n      obj.content.push(cleanText)\n    } else if (token.type === 'list') {\n      const obj = structuredResponse[currentHeading]\n      obj.text = cleanText\n      obj.list = parseList(token).flat()\n    } else if (token.type === 'html') {\n      const obj = structuredResponse[currentHeading]\n      obj.content.push(token.html)\n    } else if (token.type === 'code') {\n      const obj = structuredResponse[currentHeading]\n      obj.lang = token.lang\n      obj.text = cleanText\n    } else if (token.type === 'heading' && token.depth > 3) {\n      const obj = structuredResponse[currentHeading]\n      obj.content.push(token.children[0].value)\n    } else {\n      console.log('unhandled token type')\n      console.log(token)\n    }\n  }\n\n  for (const key in structuredResponse) {\n    const token = structuredResponse[key]\n    const content = token.content.filter(Boolean)\n    if (content && content.length > 0) {\n      if (content.length === 1) {\n        token.text = content[0]\n      }\n      token.text = content.join('\\n\\n')\n    }\n    token.content = content\n  }\n\n  return structuredResponse\n}\n","'use strict'\n\nexport default function parseDuration(text) {\n  let matched = false\n  const duration = {\n    hours: 0,\n    minutes: 0\n  }\n\n  const hoursAndMinutes = new RegExp(/([0-9]+)h([0-9]+)m/)\n  const hours = new RegExp(/([0-9]+)h/)\n\n  if (text.match(hoursAndMinutes)) {\n    matched = true\n    const [, h, m] = text.match(hoursAndMinutes)\n    duration.hours = parseInt(h)\n    duration.minutes = parseInt(m)\n  } else if (text.match(hours)) {\n    matched = true\n    const [, h] = text.match(hours)\n    duration.hours = parseInt(h)\n    duration.minutes = 0\n  }\n\n  if (matched) {\n    return duration\n  } else {\n    return null\n  }\n}\n"],"names":["commonDateFormats","commonTimeFormats","parseList","list","children","map","item","listItem","type","checked","child","text","c","value","filter","x","join","_settle","pact","state","s","_Pact","o","bind","v","then","observer","parseMD","body","token","cleanText","obj","date","time","duration","key","content","Promise","resolve","unified","use","remarkParse","remarkGfm","parse","tokens","_temp2","structuredResponse","Boolean","length","currentHeading","_iterator","_createForOfIteratorHelperLoose","_temp","test","update","stage","shouldContinue","_isSettledPact","result","reject","_resumeAfterTest","_resumeAfterBody","updateValue","_for","_step","done","remarkStringify","stringify","match","stripFinalNewline","indexOf","replace","depth","slugify","title","format","isMatch","zonedTimeToUtc","Date","toJSON","split","parseTime","formatInTimeZone","matched","hours","minutes","hoursAndMinutes","RegExp","_text$match","m","parseInt","parseDuration","push","flat","html","lang","console","log","prototype","onFulfilled","onRejected","this","callback","e","_this","thenable"],"mappings":"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"}